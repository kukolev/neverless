package neverless.domain.entity.mapobject.respawn;

import lombok.Data;
import lombok.experimental.Accessors;
import neverless.domain.entity.mapobject.AbstractMapObject;
import neverless.domain.entity.mapobject.monster.AbstractEnemyFactory;
import neverless.domain.entity.mapobject.monster.AbstractEnemy;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.OneToOne;

@Data
@Accessors(chain = true)
@Entity
public abstract class AbstractRespawnPoint extends AbstractMapObject {

    @Column
    private Integer areaX = 3;

    @Column
    private Integer areaY = 3;

    /** Turn number when the enemy is alive */
    @Column
    private Integer lastTurnInLife = 0;

    /** Period, after that enemy should be respawned (turns) */
    @Column
    private Integer respawnPeriod = 2;

    /** Enemy, created by this point */
    @OneToOne(cascade = CascadeType.ALL)
    private AbstractEnemy enemy;

    /**
     * Returns minimum int value, because respawn point should not overlay anything.
     */
    @Override
    public int getZOrder() {
        return Integer.MIN_VALUE;
    }

    /**
     * Creates and returns new enemy, generated by factory, specified for this respawn point.
     */
    public final AbstractEnemy respawnEnemy() {
        AbstractEnemyFactory factory = getEnemyFactory();
        AbstractEnemy newEnemy = factory.create();
        newEnemy.setLocation(getLocation());
        // todo: position should be random
        newEnemy.setX(getX());
        newEnemy.setY(getY());
        newEnemy.setBornX(getX());
        newEnemy.setBornY(getY());
        newEnemy.setAreaX(getAreaX());
        newEnemy.setAreaY(getAreaY());

        return newEnemy;
    }

    /**
     * Returns a factory which able to create enemies for this point.
     */
    abstract AbstractEnemyFactory getEnemyFactory();
}